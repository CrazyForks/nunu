import{_ as e,c as a,o as s,a4 as i}from"./chunks/framework.4aTu-Nia.js";const E=JSON.parse('{"title":"Server基础概念","description":"","frontmatter":{},"headers":[],"relativePath":"en/server.md","filePath":"en/server.md","lastUpdated":null}'),o={name:"en/server.md"},t=i(`<h1 id="server基础概念" tabindex="-1">Server基础概念 <a class="header-anchor" href="#server基础概念" aria-label="Permalink to &quot;Server基础概念&quot;">​</a></h1><p>在Nunu中，我们将<code>HTTP</code>、<code>GRPC</code>、<code>WebSocket</code>、<code>Task</code>、<code>Job</code>等服务都抽象为<code>Server</code>。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Server</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	Start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">error</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	Stop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">error</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>每个<code>Server</code>都必须实现<code>Server</code>接口中的方法，也就是<code>Start(ctx)</code>和<code>Stop(ctx)</code></p><h2 id="http" tabindex="-1">HTTP <a class="header-anchor" href="#http" aria-label="Permalink to &quot;HTTP&quot;">​</a></h2><p>HTTP服务，我们使用<code>gin</code>作为HTTP框架，<code>gin</code>的<code>Engine</code>实现了<code>Server</code>接口，因此，我们只需要将<code>Engine</code>作为<code>Server</code>即可。</p><h2 id="task" tabindex="-1">Task <a class="header-anchor" href="#task" aria-label="Permalink to &quot;Task&quot;">​</a></h2><p>Task服务，我们使用<code>cron</code>作为Task框架，<code>cron</code>的<code>Cron</code>实现了<code>Server</code>接口，因此，我们只需要将<code>Cron</code>作为<code>Server</code>即可。</p><h2 id="job" tabindex="-1">Job <a class="header-anchor" href="#job" aria-label="Permalink to &quot;Job&quot;">​</a></h2><p>Job服务，我们使用<code>cron</code>作为Job框架，<code>cron</code>的<code>Cron</code>实现了<code>Server</code>接口，因此，我们只需要将<code>Cron</code>作为<code>Server</code>即可。</p><h2 id="migration" tabindex="-1">Migration <a class="header-anchor" href="#migration" aria-label="Permalink to &quot;Migration&quot;">​</a></h2><p>Migration服务，我们使用<code>migrate</code>作为Migration框架，<code>migrate</code>的<code>Migrate</code>实现了<code>Server</code>接口，因此，我们只需要将<code>Migrate</code>作为<code>Server</code>即可。</p>`,12),r=[t];function d(n,c,h,l,p,k){return s(),a("div",null,r)}const v=e(o,[["render",d]]);export{E as __pageData,v as default};
