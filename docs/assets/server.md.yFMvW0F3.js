import{_ as s,c as e,o as a,a4 as t}from"./chunks/framework.DZjeu1b3.js";const E=JSON.parse('{"title":"Server基础概念","description":"","frontmatter":{},"headers":[],"relativePath":"server.md","filePath":"server.md","lastUpdated":1711880770000}'),i={name:"server.md"},o=t(`<h1 id="server基础概念" tabindex="-1">Server基础概念 <a class="header-anchor" href="#server基础概念" aria-label="Permalink to &quot;Server基础概念&quot;">​</a></h1><p>在Nunu中，我们将<code>HTTP</code>、<code>GRPC</code>、<code>WebSocket</code>、<code>Task</code>、<code>Job</code>等服务都抽象为<code>Server</code>。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Server</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	Start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">error</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	Stop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">error</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>每个<code>Server</code>都必须实现<code>Server</code>接口中的方法，也就是<code>Start(ctx)</code>和<code>Stop(ctx)</code></p><h2 id="http" tabindex="-1">HTTP <a class="header-anchor" href="#http" aria-label="Permalink to &quot;HTTP&quot;">​</a></h2><p><strong>用途</strong>：处理基于HTTP协议的请求和响应。</p><p><strong>工作原理</strong>：监听指定的HTTP端口，并根据接收到的请求执行相应的操作，然后返回相应的HTTP响应。</p><p><strong>示例应用场景</strong>：Web应用程序、API服务等。</p><h2 id="task" tabindex="-1">Task <a class="header-anchor" href="#task" aria-label="Permalink to &quot;Task&quot;">​</a></h2><p><strong>用途</strong>：处理定时任务，类似于crontab的功能。</p><p><strong>工作原理</strong>：定期执行预定义的任务或作业，通常用于周期性地执行一些重复性的任务。</p><p><strong>示例应用场景</strong>：定时数据备份、定时数据清理、定时报表生成等。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>定时任务建议独立于<code>HTTP server</code>运行，避免影响主应用程序的运行。但同时nunu支持<code>Task</code>和<code>HTTP server</code>同时运行，请参考<code>Job</code>的实现。</p></div><h2 id="job" tabindex="-1">Job <a class="header-anchor" href="#job" aria-label="Permalink to &quot;Job&quot;">​</a></h2><p><strong>用途</strong>：处理异步任务，通常用于处理消息队列（MQ）中的消息。</p><p><strong>工作原理</strong>：从消息队列中获取任务并执行，可以是一些需要异步处理的任务，如邮件发送、文件处理等。</p><p><strong>示例应用场景</strong>：异步任务队列、消息驱动的系统等。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>nunu支持<code>Job</code>和<code>HTTP server</code>同时运行，也同样支持独立于<code>HTTP server</code>运行，请参考<code>Task</code>或是<code>Migration</code>的实现。</p></div><h2 id="migration" tabindex="-1">Migration <a class="header-anchor" href="#migration" aria-label="Permalink to &quot;Migration&quot;">​</a></h2><p><strong>用途</strong>：处理数据库迁移和数据迁移任务。</p><p><strong>工作原理</strong>：Migration服务负责管理数据库结构的变化和数据的迁移，例如在软件升级过程中，需要更新数据库模式或迁移现有数据以适应新的模式。</p><p><strong>示例应用场景</strong>：迁移数据库表结构，例如添加新的列、删除旧的列、修改列的数据类型等。 迁移数据，例如将旧数据格式转换为新的格式、合并数据、拆分数据等。 管理数据库版本，确保数据库结构与应用程序代码的版本兼容性。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Migration须谨慎用于生成环境，以免导致数据丢失或破坏。</p></div>`,23),r=[o];function n(p,c,d,l,h,k){return a(),e("div",null,r)}const T=s(i,[["render",n]]);export{E as __pageData,T as default};
